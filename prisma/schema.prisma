// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @unique
  email String @unique
  File  File[]

  Workspace              Workspace[]
  stripeCustomerId       String?     @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?     @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?     @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?   @map(name: "stripe_current_period_end")
  message                Message[]

  Folders Folders[]
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum VectorStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model Folders {
  id     String  @id @default(cuid())
  name   String  @default("")
  Files  File[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
  size         Int
  Workspace    Workspace?   @relation(fields: [workspaceId], references: [id])
  workspaceId  String?
  message      Message[]
  Folder       Folders?     @relation(fields: [folderId], references: [id])
  folderId     String?
  vectorStatus VectorStatus @default(PENDING)
}

model Workspace {
  id        String    @id @default(cuid())
  name      String    @default("untitled workspace")
  createdAt DateTime  @default(now())
  File      File[]
  Messages  Message[]
  userId    String
  User      User      @relation(fields: [userId], references: [id])
}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  chatId      String?
  File        File?      @relation(fields: [fileId], references: [id])
  fileId      String?
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @unique
  email String @unique
  File  File[]
  plan  Plans  @default(FREE)

  Workspace  Workspace[]
  customerId String?     @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  message                Message[]

  Folders        Folders[]
  subscriptionId String?
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum VectorStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model Folders {
  id     String  @id @default(cuid())
  name   String  @default("")
  Files  File[]
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  size         Int
  message      Message[]
  vectorStatus VectorStatus @default(PENDING)

  // Many-to-many relationship with Workspace
  Workspaces Workspace[] @relation("FileWorkspaces")
  Folders    Folders?    @relation(fields: [foldersId], references: [id])
  foldersId  String?
  color      String      @default("#000000")
  PageFile   PageFile[]
}

model Workspace {
  id        String    @id @default(cuid())
  name      String    @default("untitled workspace")
  createdAt DateTime  @default(now())
  Files     File[]    @relation("FileWorkspaces") // Many-to-many relationship with File
  Messages  Message[]
  userId    String
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id            String     @id @default(cuid())
  text          String
  isUserMessage Boolean
  userId        String?
  workspaceId   String?
  PageFiles     PageFile[] // Relationship with PageFile
  User          User?      @relation(fields: [userId], references: [id])
  File          File?      @relation(fields: [fileId], references: [id])
  fileId        String?
  Workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  createdAt     DateTime   @default(now())
}

model PageFile {
  id         String  @id @default(cuid())
  fileId     String
  pageNumber Int
  messageId  String
  Message    Message @relation(fields: [messageId], references: [id])
  File       File    @relation(fields: [fileId], references: [id]) // Relation to File model
}

enum Plans {
  FREE
  STUDENT
  PRO
}

enum SubscriptionPeriod {
  MONTHLY
  YEARLY
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @unique
  email                  String      @unique
  File                   File[]
  Chat                   Chat[]
  Workspace              Workspace[]
  stripeCustomerId       String?     @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?     @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?     @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?   @map(name: "stripe_current_period_end")
  message                Message[]
  Folders                Folder[]
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

enum vectorStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model Folder {
  id     String  @id @default(cuid())
  name   String
  Files  File[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
  size         Int
  Workspace    Workspace?   @relation(fields: [workspaceId], references: [id])
  workspaceId  String?
  Chat         Chat?        @relation(fields: [chatId], references: [id])
  chatId       String?
  message      Message[]
  Folder       Folder?      @relation(fields: [folderId], references: [id])
  folderId     String?
  vectorStatus vectorStatus @default(PENDING)
}

model Chat {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  File      File[]
  userId    String
  User      User     @relation(fields: [userId], references: [id])
}

model Workspace {
  id        String   @id @default(cuid())
  name      String   @default("untitled workspace")
  createdAt DateTime @default(now())
  File      File[]
  userId    String
  User      User     @relation(fields: [userId], references: [id])
}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  chatId String?
  File   File?   @relation(fields: [fileId], references: [id])
  fileId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}
